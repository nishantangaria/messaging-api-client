/*
 * TelstraSMSMessagingAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.telstra.sapi.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class SendSMSRequest 
        implements java.io.Serializable {
    private static final long serialVersionUID = 5396891921157732954L;
    private String to;
    private String body;
    private String from;
    private Integer validity;
    private Integer scheduleDelivery;
    private String notifyURL;
    private Boolean replyRequest;
    /** GETTER
     * Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format.
     */
    @JsonGetter("to")
    public String getTo ( ) { 
        return this.to;
    }
    
    /** SETTER
     * Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format.
     */
    @JsonSetter("to")
    public void setTo (String value) { 
        this.to = value;
    }
 
    /** GETTER
     * The text body of the message. Messages longer than 160 characters will be counted as multiple messages.
     */
    @JsonGetter("body")
    public String getBody ( ) { 
        return this.body;
    }
    
    /** SETTER
     * The text body of the message. Messages longer than 160 characters will be counted as multiple messages.
     */
    @JsonSetter("body")
    public void setBody (String value) { 
        this.body = value;
    }
 
    /** GETTER
     * Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters.
     */
    @JsonGetter("from")
    public String getFrom ( ) { 
        return this.from;
    }
    
    /** SETTER
     * Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters.
     */
    @JsonSetter("from")
    public void setFrom (String value) { 
        this.from = value;
    }
 
    /** GETTER
     * How long the platform should attempt to deliver the message for. This period is specified in minutes from the message
     */
    @JsonGetter("validity")
    public Integer getValidity ( ) { 
        return this.validity;
    }
    
    /** SETTER
     * How long the platform should attempt to deliver the message for. This period is specified in minutes from the message
     */
    @JsonSetter("validity")
    public void setValidity (Integer value) { 
        this.validity = value;
    }
 
    /** GETTER
     * How long the platform should wait before attempting to send the message - specified in minutes.
     */
    @JsonGetter("scheduleDelivery")
    public Integer getScheduleDelivery ( ) { 
        return this.scheduleDelivery;
    }
    
    /** SETTER
     * How long the platform should wait before attempting to send the message - specified in minutes.
     */
    @JsonSetter("scheduleDelivery")
    public void setScheduleDelivery (Integer value) { 
        this.scheduleDelivery = value;
    }
 
    /** GETTER
     * Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc.
     */
    @JsonGetter("notifyURL")
    public String getNotifyURL ( ) { 
        return this.notifyURL;
    }
    
    /** SETTER
     * Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc.
     */
    @JsonSetter("notifyURL")
    public void setNotifyURL (String value) { 
        this.notifyURL = value;
    }
 
    /** GETTER
     * If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented.
     */
    @JsonGetter("replyRequest")
    public Boolean getReplyRequest ( ) { 
        return this.replyRequest;
    }
    
    /** SETTER
     * If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented.
     */
    @JsonSetter("replyRequest")
    public void setReplyRequest (Boolean value) { 
        this.replyRequest = value;
    }
 
}
 