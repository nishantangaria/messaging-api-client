/**
 * TelstraSMSMessagingAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of SendSMSRequest
 *
 * @constructor
 */
angular.module('TelstraSMSMessagingAPILib')
    .factory('SendSMSRequest', ['BaseModel', SendSMSRequestModel]);

    function SendSMSRequestModel(BaseModel) {
        var SendSMSRequest = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.to = this.getValue(obj.to);
            this.body = this.getValue(obj.body);
            this.from = this.getValue(obj.from);
            this.validity = this.getValue(obj.validity);
            this.scheduleDelivery = this.getValue(obj.scheduleDelivery);
            this.notifyURL = this.getValue(obj.notifyURL);
            this.replyRequest = this.getValue(obj.replyRequest);
        };

        SendSMSRequest.prototype = new BaseModel();
        SendSMSRequest.prototype.constructor = SendSMSRequest;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        SendSMSRequest.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'to', realName: 'to' },
                { name: 'body', realName: 'body' },
                { name: 'from', realName: 'from' },
                { name: 'validity', realName: 'validity' },
                { name: 'scheduleDelivery', realName: 'scheduleDelivery' },
                { name: 'notifyURL', realName: 'notifyURL' },
                { name: 'replyRequest', realName: 'replyRequest' }
            ]);
        };
    
        /**
         * Phone number (in E.164 format) to send the SMS to. This number can be in international format if
         * preceeded by a ‘+’, or in national format.
         *
         * @return {string}
         */
        SendSMSRequest.prototype.getTo = function () {
            return this.to;
        };
    
        /**
         * Setter for To
         * 
         * @param {string} value 
         */
        SendSMSRequest.prototype.setTo = function (value) {
            this.to = value;
        };
    
        /**
         * The text body of the message. Messages longer than 160 characters will be counted as multiple messages.
         *
         * @return {string}
         */
        SendSMSRequest.prototype.getBody = function () {
            return this.body;
        };
    
        /**
         * Setter for Body
         * 
         * @param {string} value 
         */
        SendSMSRequest.prototype.setBody = function (value) {
            this.body = value;
        };
    
        /**
         * Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile
         * number associated with the application, or it be an Alphanumeric address of up to 11 characters.
         *
         * @return {string|null}
         */
        SendSMSRequest.prototype.getFrom = function () {
            return this.from;
        };
    
        /**
         * Setter for From
         * 
         * @param {string|null} value 
         */
        SendSMSRequest.prototype.setFrom = function (value) {
            this.from = value;
        };
    
        /**
         * How long the platform should attempt to deliver the message for. This period is specified in minutes from
         * the message
         *
         * @return {int|null}
         */
        SendSMSRequest.prototype.getValidity = function () {
            return this.validity;
        };
    
        /**
         * Setter for Validity
         * 
         * @param {int|null} value 
         */
        SendSMSRequest.prototype.setValidity = function (value) {
            this.validity = value;
        };
    
        /**
         * How long the platform should wait before attempting to send the message - specified in minutes.
         *
         * @return {int|null}
         */
        SendSMSRequest.prototype.getScheduleDelivery = function () {
            return this.scheduleDelivery;
        };
    
        /**
         * Setter for ScheduleDelivery
         * 
         * @param {int|null} value 
         */
        SendSMSRequest.prototype.setScheduleDelivery = function (value) {
            this.scheduleDelivery = value;
        };
    
        /**
         * Contains a URL that will be called once your message has been processed. The status may be delivered,
         * expired, deleted, etc.
         *
         * @return {string|null}
         */
        SendSMSRequest.prototype.getNotifyURL = function () {
            return this.notifyURL;
        };
    
        /**
         * Setter for NotifyURL
         * 
         * @param {string|null} value 
         */
        SendSMSRequest.prototype.setNotifyURL = function (value) {
            this.notifyURL = value;
        };
    
        /**
         * If set to true, the reply message functionality will be implemented and the to address will be ignored if
         * present. If false or not present, then normal message handling is implemented.
         *
         * @return {bool|null}
         */
        SendSMSRequest.prototype.getReplyRequest = function () {
            return this.replyRequest;
        };
    
        /**
         * Setter for ReplyRequest
         * 
         * @param {bool|null} value 
         */
        SendSMSRequest.prototype.setReplyRequest = function (value) {
            this.replyRequest = value;
        };
    
        return SendSMSRequest;
    }

}(angular));
