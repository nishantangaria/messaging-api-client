/**
 * TelstraSMSMessagingAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of MessageSentResponse
 *
 * @constructor
 */
angular.module('TelstraSMSMessagingAPILib')
    .factory('MessageSentResponse', ['BaseModel', MessageSentResponseModel]);

    function MessageSentResponseModel(BaseModel) {
        var MessageSentResponse = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.to = this.getValue(obj.to);
            this.deliveryStatus = this.getValue(obj.deliveryStatus);
            this.description = this.getValue(obj.description);
            this.messageId = this.getValue(obj.messageId);
            this.messageType = this.getValue(obj.messageType);
            this.numberSegements = this.getValue(obj.numberSegements);
        };

        MessageSentResponse.prototype = new BaseModel();
        MessageSentResponse.prototype.constructor = MessageSentResponse;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        MessageSentResponse.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'to', realName: 'to' },
                { name: 'deliveryStatus', realName: 'deliveryStatus' },
                { name: 'description', realName: 'description' },
                { name: 'messageId', realName: 'messageId' },
                { name: 'messageType', realName: 'messageType' },
                { name: 'numberSegements', realName: 'numberSegements' }
            ]);
        };
    
        /**
         * The mobile phone number (in E.164 format) that the message was sent to.
         *
         * @return {string}
         */
        MessageSentResponse.prototype.getTo = function () {
            return this.to;
        };
    
        /**
         * Setter for To
         * 
         * @param {string} value 
         */
        MessageSentResponse.prototype.setTo = function (value) {
            this.to = value;
        };
    
        /**
         * The current status of the message for this address. Possible values are; 'DeliveryImpossible' – The
         * message has been rejected and cannot be delivered. see the description field. 'MessageWaiting' – The
         * message will be delivered as soon as possible.
         *
         * @return {string}
         */
        MessageSentResponse.prototype.getDeliveryStatus = function () {
            return this.deliveryStatus;
        };
    
        /**
         * Setter for DeliveryStatus
         * 
         * @param {string} value 
         */
        MessageSentResponse.prototype.setDeliveryStatus = function (value) {
            this.deliveryStatus = value;
        };
    
        /**
         * This is a string that describes why a message could not be delivered.
         *
         * @return {string|null}
         */
        MessageSentResponse.prototype.getDescription = function () {
            return this.description;
        };
    
        /**
         * Setter for Description
         * 
         * @param {string|null} value 
         */
        MessageSentResponse.prototype.setDescription = function (value) {
            this.description = value;
        };
    
        /**
         * The message ID of the SMS that was sent. Use this ID to view the message status or to receive get
         * responses.
         *
         * @return {string|null}
         */
        MessageSentResponse.prototype.getMessageId = function () {
            return this.messageId;
        };
    
        /**
         * Setter for MessageId
         * 
         * @param {string|null} value 
         */
        MessageSentResponse.prototype.setMessageId = function (value) {
            this.messageId = value;
        };
    
        /**
         * A string that identifys the transport mechanism that was selected for delivering the the message.
         *
         * @return {MessageTypeEnum|null}
         */
        MessageSentResponse.prototype.getMessageType = function () {
            return this.messageType;
        };
    
        /**
         * Setter for MessageType
         * 
         * @param {MessageTypeEnum|null} value 
         */
        MessageSentResponse.prototype.setMessageType = function (value) {
            this.messageType = value;
        };
    
        /**
         * An integer between 0 and 65536 that indicates the number of chargable segments in the message. For SMS
         * this will be the number of segments the message had to be divided into (after convertion) to a character
         * set understood by the SMS network.
         *
         * @return {int|null}
         */
        MessageSentResponse.prototype.getNumberSegements = function () {
            return this.numberSegements;
        };
    
        /**
         * Setter for NumberSegements
         * 
         * @param {int|null} value 
         */
        MessageSentResponse.prototype.setNumberSegements = function (value) {
            this.numberSegements = value;
        };
    
        return MessageSentResponse;
    }

}(angular));
