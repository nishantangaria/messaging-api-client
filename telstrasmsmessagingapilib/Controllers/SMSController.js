/**
  * TelstraSMSMessagingAPILib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
  */

;(function (angular) {
'use strict';

angular.module('TelstraSMSMessagingAPILib')
    .factory('SMSController', ['$q', 'Configuration', 'HttpClient', 'APIHelper', 'BaseController', SMSController
    ]);

    function SMSController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Send an SMS to a Australian or International mobile phone.
             *
             * @param {string} authorization A header in the format 'Bearer {access_token}' - get the token by
             * using the OAuth API with the scope 'SMS'
             * @param {SendSMSRequest} payload A JSON or XML payload containing the recipient's phone number and
             * text message. The recipient number should be in the format
             * '04xxxxxxxx' where x is a digit
             *
             * @return {promise<MessageSentResponse>}
             */
            createMessagesSmsSend: function (authorization, payload) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/messages/sms';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'content-type': 'application/json; charset=utf-8',
                    'Authorization': authorization
                };

                // Remove null values
                APIHelper.cleanObject(payload);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: payload
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'MessageSentResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or missing request parameters',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or no credentials passed in the request',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Authorization credentials passed and accepted but account does not have' +
                                'permission',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 404) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested URI does not exist',
                            errorCode: 404,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 405) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested resource does not support the supplied verb',
                            errorCode: 405,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 415) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'API does not support the requested content type',
                            errorCode: 415,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The request is formed correctly, but due to some condition the request' +
                                'cannot be processed e.g. email is required and it is not provided in the' +
                                'request',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'An internal error occurred when processing the request',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 501) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The HTTP method being used has not yet been implemented for the requested' +
                                'resource',
                            errorCode: 501,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 503) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The service requested is currently unavailable',
                            errorCode: 503,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve the status of a single outgoing SMS message.
             *
             * @param {string} authorization Authorization header in the format 'Bearer {access_token}' - get the
             * token by using the OAuth API with the scope 'SMS'
             * @param {string} messageId Unique identifier of a message - it is the value returned from a previous
             * POST call to https://api.telstra.com/v2/messages/sms
             *
             * @return {promise<OutboundPollResponse>}
             */
            getMessagesSmsOutgoingOne: function (authorization, messageId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/messages/sms/{messageId}/status';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'messageId': messageId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': authorization
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'OutboundPollResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or missing request parameters',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or no credentials passed in the request',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Authorization credentials passed and accepted but account does not have' +
                                'permission',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 404) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested URI does not exist',
                            errorCode: 404,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 405) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested resource does not support the supplied verb',
                            errorCode: 405,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 415) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'API does not support the requested content type',
                            errorCode: 415,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The request is formed correctly, but due to some condition the request' +
                                'cannot be processed e.g. email is required and it is not provided in the' +
                                'request',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'An internal error occurred when processing the request',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 501) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The HTTP method being used has not yet been implemented for the requested' +
                                'resource',
                            errorCode: 501,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 503) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The service requested is currently unavailable',
                            errorCode: 503,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve the status for all recent outgoing SMS messages
             *
             * @param {string} authorization Authorization header in the format 'Bearer {access_token}' - get the
             * token by using the OAuth API with the scope 'SMS'
             *
             * @return {promise<OutboundPollResponse>}
             */
            getMessagesSmsOutgoingAll: function (authorization) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/messages/sms/outgoing';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': authorization
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = parsed.map(function(model){
                        return BaseController.getObjectMapper().mapObject(model, 'OutboundPollResponse');
                    });
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or missing request parameters',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or no credentials passed in the request',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Authorization credentials passed and accepted but account does not have' +
                                'permission',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 404) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested URI does not exist',
                            errorCode: 404,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 405) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested resource does not support the supplied verb',
                            errorCode: 405,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 415) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'API does not support the requested content type',
                            errorCode: 415,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The request is formed correctly, but due to some condition the request' +
                                'cannot be processed e.g. email is required and it is not provided in the' +
                                'request',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'An internal error occurred when processing the request',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 501) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The HTTP method being used has not yet been implemented for the requested' +
                                'resource',
                            errorCode: 501,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 503) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The service requested is currently unavailable',
                            errorCode: 503,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve the unread incoming SMS messages
             *
             * @param {string} authorization Authorization header in the format 'Bearer {access_token}' - get the
             * token by using the OAuth API with the scope 'SMS'
             *
             * @return {promise<InboundPollResponse>}
             */
            getMessagesSmsIncoming: function (authorization) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/messages/sms/incoming';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': authorization
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = parsed.map(function(model){
                        return BaseController.getObjectMapper().mapObject(model, 'InboundPollResponse');
                    });
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or missing request parameters',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid or no credentials passed in the request',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Authorization credentials passed and accepted but account does not have' +
                                'permission',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 404) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested URI does not exist',
                            errorCode: 404,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 405) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The requested resource does not support the supplied verb',
                            errorCode: 405,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 415) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'API does not support the requested content type',
                            errorCode: 415,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The request is formed correctly, but due to some condition the request' +
                                'cannot be processed e.g. email is required and it is not provided in the' +
                                'request',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'An internal error occurred when processing the request',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 501) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The HTTP method being used has not yet been implemented for the requested' +
                                'resource',
                            errorCode: 501,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 503) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'The service requested is currently unavailable',
                            errorCode: 503,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
