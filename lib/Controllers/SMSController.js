/**
 * TelstraSMSMessagingAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class SMSController {
    /**
     * Send an SMS to a Australian or International mobile phone.
     *
     * @param {string} authorization A header in the format 'Bearer {access_token}' - get the token
     * by using the OAuth API with the scope 'SMS'
     * @param {SendSMSRequest} payload A JSON or XML payload containing the recipient's phone
     * number and text message. The recipient number should be in
     * the format '04xxxxxxxx' where x is a digit
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createMessagesSmsSend(authorization, payload, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/messages/sms'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            Authorization: authorization,
        };

        // remove null values
        _apiHelper.cleanObject(payload);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(payload),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MessageSentResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or missing request parameters';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or missing request parameters',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or no credentials passed in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or no credentials passed in the request',
                        errorCode: 401,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Authorization credentials passed and accepted but account does not have permission';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Authorization credentials passed and accepted but account does not have permission',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested URI does not exist';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested URI does not exist',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 405) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested resource does not support the supplied verb';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested resource does not support the supplied verb',
                        errorCode: 405,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'API does not support the requested content type';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'API does not support the requested content type',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'An internal error occurred when processing the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An internal error occurred when processing the request',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 501) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The HTTP method being used has not yet been implemented for the requested resource';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The HTTP method being used has not yet been implemented for the requested resource',
                        errorCode: 501,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 503) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The service requested is currently unavailable';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The service requested is currently unavailable',
                        errorCode: 503,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * Retrieve the status of a single outgoing SMS message.
     *
     * @param {string} authorization Authorization header in the format 'Bearer {access_token}' -
     * get the token by using the OAuth API with the scope 'SMS'
     * @param {string} messageId Unique identifier of a message - it is the value returned from a
     * previous POST call to https://api.telstra.com/v2/messages/sms
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getMessagesSmsOutgoingOne(authorization, messageId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/messages/sms/{messageId}/status'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            messageId,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            Authorization: authorization,
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'OutboundPollResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or missing request parameters';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or missing request parameters',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or no credentials passed in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or no credentials passed in the request',
                        errorCode: 401,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Authorization credentials passed and accepted but account does not have permission';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Authorization credentials passed and accepted but account does not have permission',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested URI does not exist';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested URI does not exist',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 405) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested resource does not support the supplied verb';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested resource does not support the supplied verb',
                        errorCode: 405,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'API does not support the requested content type';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'API does not support the requested content type',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'An internal error occurred when processing the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An internal error occurred when processing the request',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 501) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The HTTP method being used has not yet been implemented for the requested resource';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The HTTP method being used has not yet been implemented for the requested resource',
                        errorCode: 501,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 503) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The service requested is currently unavailable';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The service requested is currently unavailable',
                        errorCode: 503,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * Retrieve the status for all recent outgoing SMS messages
     *
     * @param {string} authorization Authorization header in the format 'Bearer {access_token}' -
     * get the token by using the OAuth API with the scope 'SMS'
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getMessagesSmsOutgoingAll(authorization, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/messages/sms/outgoing'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            Authorization: authorization,
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'OutboundPollResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or missing request parameters';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or missing request parameters',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or no credentials passed in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or no credentials passed in the request',
                        errorCode: 401,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Authorization credentials passed and accepted but account does not have permission';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Authorization credentials passed and accepted but account does not have permission',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested URI does not exist';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested URI does not exist',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 405) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested resource does not support the supplied verb';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested resource does not support the supplied verb',
                        errorCode: 405,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'API does not support the requested content type';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'API does not support the requested content type',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'An internal error occurred when processing the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An internal error occurred when processing the request',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 501) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The HTTP method being used has not yet been implemented for the requested resource';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The HTTP method being used has not yet been implemented for the requested resource',
                        errorCode: 501,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 503) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The service requested is currently unavailable';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The service requested is currently unavailable',
                        errorCode: 503,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * Retrieve the unread incoming SMS messages
     *
     * @param {string} authorization Authorization header in the format 'Bearer {access_token}' -
     * get the token by using the OAuth API with the scope 'SMS'
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getMessagesSmsIncoming(authorization, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/messages/sms/incoming'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            Authorization: authorization,
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'InboundPollResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or missing request parameters';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or missing request parameters',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Invalid or no credentials passed in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid or no credentials passed in the request',
                        errorCode: 401,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'Authorization credentials passed and accepted but account does not have permission';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Authorization credentials passed and accepted but account does not have permission',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested URI does not exist';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested URI does not exist',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 405) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The requested resource does not support the supplied verb';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The requested resource does not support the supplied verb',
                        errorCode: 405,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 415) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'API does not support the requested content type';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'API does not support the requested content type',
                        errorCode: 415,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'An internal error occurred when processing the request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An internal error occurred when processing the request',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 501) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The HTTP method being used has not yet been implemented for the requested resource';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The HTTP method being used has not yet been implemented for the requested resource',
                        errorCode: 501,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 503) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'ErrorErrorException');
                    mappedObject.reason = 'The service requested is currently unavailable';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'The service requested is currently unavailable',
                        errorCode: 503,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

}

module.exports = SMSController;
